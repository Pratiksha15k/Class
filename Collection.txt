                                  List                     Set                         Map
1) unsynchronous in nature        true                     true                        true - Collections.synchronizedMap(map);
2) duplicate                      allowed                  not allowed                 keys - not allowed, values - allowed
3) order                          insertion order          ordered                     ordered

-----------------------------------------------------------------------------------------------------

Arraylist-
duplicate allowed
initial capacity -10
internally it uses array only
dynamic in nature
index wise operation
| 2 | 3 | 6 | 8 | 
array does right, left shifting operations internally while doing insertion, deletion
in case of insertion right shifting operation performs internally
in case of delete left shifting operation performs internally

------------------------------------------------------------------------------------------------------

Linkedlist-
duplicate allowed
initial capacity -0
address for previous node + element + address for next node - doubly linked list - two way operation
dynamic in nature

------------------------------------------------------------------------------------------------------

Vector-
legacy class
synchronous in nature- generally used in multithreaded 
dynamic
its initial capacity specified by setsize
its size is automatically grows

------------------------------------------------------------------------------------------------------

Queue- implemenation as linkedlist
additional insertion, extraction operations provided
insertion - add() - throws exception, offer() - return null 
removal - remove() - throws exception, poll() - return default values
fetching - element() - throws exception, peek() - return default values
null element not allowed

------------------------------------------------------------------------------------------------------

ProrityQueue- class
initial capacity -11
odered according to comparable or comparator passed to it
if comparable or comparator not passed elements maintain natural ordering
FIFO principal 
null not allowed
priority queue implements serializable interface and extends abstractqueue

------------------------------------------------------------------------------------------------------

HashSet-
order predicatable - depends upon jvm
duplicate not allowed
set.add(object);
internally it uses hashmap
unsynchronous
initial capacity -16

------------------------------------------------------------------------------------------------------

Linkedhashset-
implementation by linkedhashmap
order - insertion order maintains
duplicate not allowed
user - multiple roles - Admin, Engineer, operator - elements fetched according to its insertion order only
unsynchronous
initial capacity - 16

------------------------------------------------------------------------------------------------------

TreeSet-
implementation by treemap
order - comparator or comparable passed to it - if not passed then natural ordering
duplicate not allowed
unsynchronous
initial capacity -16

-------------------------------------------------------------------------------------------------------

HashMap-
(key,value) - key is always unique, value can be duplicate
for each key - hashcode generated by JVM or you can override hashCode method object class
it may happen, different key have same hashCode -> collision -> linkedlist

key1,abc | key2,cde
suppose key1 - key2 - 0X025
0X025 => | abc | address for next node | -> | cde | null |

key1,abc | key1,cde
it may happen that for same key, hashcode may be different
map.get(key1); //cde

key1,abc | key2,abc
suppose key1 - key2 - 0X025 - in case of same hashcode, it calls equals method also to check if value is alredy exist or not
0X025 => | abc | address for next node |

initial capacity- 16
load factor-75%
16*75/100 = 12(threshold) -> when it reaches to threshold hashmap increases size doubled. 

-------------------------------------------------------------------------------------------------------

LinkedHashMap-
(key,value) - key is always unique, value can be duplicate
for each key - hashcode generated by JVM or you can override hashCode method object class
it may happen, different key have same hashCode -> collision -> linkedlist

initial capacity- 16
load factor-75%
16*75/100 = 12(threshold) -> when it reaches to threshold hashmap increases size doubled. 

maintains insertion order-
linkedlist

------------------------------------------------------------------------------------------------------

TreeMap-
key,value) - key is always unique, value can be duplicate
for each key - hashcode generated by JVM or you can override hashCode method object class
it may happen, different key have same hashCode -> collision -> linkedlist

initial capacity- 16
load factor-75%
16*75/100 = 12(threshold) -> when it reaches to threshold hashmap increases size doubled. 

maintains order depends on comparable or comparator passed to it, by default natural ordering

------------------------------------------------------------------------------------------------------

HashTable-
legacy class
synchronous in nature
thread safe
can store object of any type


------------------------------------------------------------------------------------------------------

Iterator, Iterable, Enumeration, Comparator, Comparable

